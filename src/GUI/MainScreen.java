/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import classes.First;
import classes.Last;
import classes.ReaderFile;
import classes.Robot;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.CANCEL_SELECTION;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Randi Guarcas
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JOpenFile = new javax.swing.JButton();
        JFile = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableContent = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTableAlphabet = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTableEnviroments = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        JTableTerms = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        JTableFirst = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        JTableLast = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JOpenFile.setText("Open File");
        JOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JOpenFileActionPerformed(evt);
            }
        });

        JTableContent.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Content"
            }
        ));
        JTableContent.setEditingRow(0);
        JTableContent.setRowHeight(30);
        jScrollPane1.setViewportView(JTableContent);

        JTableAlphabet.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableAlphabet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alphabet"
            }
        ));
        JTableAlphabet.setRowHeight(30);
        jScrollPane2.setViewportView(JTableAlphabet);

        JTableEnviroments.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableEnviroments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enviroments"
            }
        ));
        JTableEnviroments.setRowHeight(30);
        jScrollPane3.setViewportView(JTableEnviroments);

        JTableTerms.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableTerms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Terminals"
            }
        ));
        JTableTerms.setRowHeight(30);
        jScrollPane4.setViewportView(JTableTerms);

        JTableFirst.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableFirst.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Function"
            }
        ));
        JTableFirst.setRowHeight(30);
        jScrollPane5.setViewportView(JTableFirst);

        JTableLast.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        JTableLast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Last Function"
            }
        ));
        JTableLast.setRowHeight(35);
        jScrollPane6.setViewportView(JTableLast);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JFile))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(213, 213, 213))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JOpenFileActionPerformed
        //Crea un nuevo file chooser para 
        //seleccionar un archivo
        JFileChooser JFile = new JFileChooser();
        FileNameExtensionFilter JFilter = new FileNameExtensionFilter(CANCEL_SELECTION, "txt");
        JFile.setFileFilter(JFilter);
        JFile.showOpenDialog(MainScreen.this);
        //se carga el archivo en memoria
        File file = JFile.getSelectedFile();
        //Agrega la ruta del archivo al JLabel - JFile
        this.JFile.setText(file.toString());
        //Obtiene cada linea del fichero de text
        ReaderFile readerFile = new ReaderFile();
        //se envia el archivo en memoria al metodo open
        readerFile.open(file);
        //se recibe por medio de un array list
        //se envia el array list al robot
        Robot robot = new Robot();
        //Envio de parametro para alfabeto
        robot.alpabethPrefix = "A";
        robot.prefixKeySplit = ":";
        
        //Carga de archivo al robot
        robot.load(readerFile.content);
        // metodo para ver el contenido original del fichero robot.getOriginalContent();
        JTableContentRender(robot.getOriginalContent());
        // metodo para cargar el contenido del alfabeto robot.getAlphabet()
        JTableAlphabetRender(robot.getAlphabet());
        // metogo para cargar el contenido limpio
        robot.getCleanContent();
        //metodo para cargar las variables  robot.getEnviroment()
        JTableEnviromentsRender(robot.getEnviroment());
        //metodo que cargar todas las terminales robot.getTerms()
        JTableTermsRender(robot.getTerms());
        //metodo para cargar la function primera robot.getFirstLogic()
        JTableFirstRender(robot.getFirstLogic());
        //metodo que retorna la funcion siguiente robot.getLastLogic()
        JTableLastRender(robot.getLastLogic());
    }//GEN-LAST:event_JOpenFileActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JFile;
    private javax.swing.JButton JOpenFile;
    private javax.swing.JTable JTableAlphabet;
    private javax.swing.JTable JTableContent;
    private javax.swing.JTable JTableEnviroments;
    private javax.swing.JTable JTableFirst;
    private javax.swing.JTable JTableLast;
    private javax.swing.JTable JTableTerms;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables

    private void JTableContentRender(ArrayList<String> originalContent) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"File Content"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        for (int i = 0; i < originalContent.size(); i++) {
            FileRow[0] = originalContent.get(i);
            FileTableModel.addRow(FileRow);
        }
        JTableContent.setModel(FileTableModel);
    }
    
     private void JTableAlphabetRender(String[] originalContent) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"Alphabet"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        for (int i = 0; i < originalContent.length; i++) {
            FileRow[0] = originalContent[i];
            FileTableModel.addRow(FileRow);
        }
        JTableAlphabet.setModel(FileTableModel);
    }
     
    private void JTableEnviromentsRender(ArrayList<String> originalContent) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"Enviroments"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        for (int i = 0; i < originalContent.size(); i++) {
            FileRow[0] = originalContent.get(i);
            FileTableModel.addRow(FileRow);
        }
        JTableEnviroments.setModel(FileTableModel);
    }
    private void JTableTermsRender(ArrayList<String> originalContent) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"Terminals"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        for (int i = 0; i < originalContent.size(); i++) {
            FileRow[0] = originalContent.get(i);
            FileTableModel.addRow(FileRow);
        }
        JTableTerms.setModel(FileTableModel);
    } 
    
    private void JTableFirstRender(ArrayList<First> first) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"First Function"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        
        for (First getFirst : first) {
            FileRow[0] = getFirst.toString();
            FileTableModel.addRow(FileRow);
        }
        
        JTableFirst.setModel(FileTableModel);
    } 
    
    private void JTableLastRender(ArrayList<Last> first) {
        DefaultTableModel FileTableModel = new DefaultTableModel();
        FileTableModel.setColumnIdentifiers(new String[]{"Last Function"});
        Object[] FileRow = new Object[FileTableModel.getColumnCount()];
        
        for (Last getFirst : first) {
            FileRow[0] = getFirst.toString();
            FileTableModel.addRow(FileRow);
        }
        
        JTableLast.setModel(FileTableModel);
    } 
}
